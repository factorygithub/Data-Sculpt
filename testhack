import numpy as np
import pandas as pd
from sklearn.ensemble import IsolationForest
import time

# Simulated login event logs (replace with real logs from a database or API)
login_data = pd.DataFrame({
    'user_id': [101, 102, 103, 101, 104, 105, 101, 106, 107, 108, 109, 101, 110, 111],
    'login_time': [8, 22, 13, 23, 3, 10, 2, 14, 20, 4, 6, 1, 16, 18],  # Military hours (0-23)
    'failed_attempts': [0, 2, 1, 5, 0, 0, 6, 3, 0, 0, 7, 8, 0, 0],
    'login_location': [1, 2, 2, 3, 1, 1, 3, 4, 1, 2, 5, 3, 1, 1]  # Encoded locations
})

# Feature selection for anomaly detection
features = login_data[['login_time', 'failed_attempts', 'login_location']]

# Train Isolation Forest model to detect anomalies
model = IsolationForest(n_estimators=100, contamination=0.15, random_state=42)
login_data['anomaly'] = model.fit_predict(features)

# Function to monitor and detect login anomalies
def monitor_logins():
    print("\nüîç Monitoring Login Activity...\n")
    
    for index, row in login_data.iterrows():
        user = row['user_id']
        if row['anomaly'] == -1:  # If marked as an anomaly
            print(f"üö® ALERT: Suspicious login detected for User {user} at hour {row['login_time']} with {row['failed_attempts']} failed attempts!")

# Run the bot continuously (simulate real-time monitoring)
while True:
    monitor_logins()
    print("\n‚è≥ Waiting for new login logs...\n")
    time.sleep(10)  # Simulate real-time updates
